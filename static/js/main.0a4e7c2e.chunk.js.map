{"version":3,"sources":["components/FormInput.js","components/BMICalculator.js","components/BMI.js","App.js","index.js"],"names":["FormInput","props","name","type","title","value","onChange","className","autoComplete","BMICalculator","getBmiValue","useState","heightUnit","setHeightUnit","weightUnit","setWeightUnit","unit","setUnit","heightCount","inchesCount","weightCount","count","setCount","useEffect","metricBMI","imperialBMI","onChangeInput","e","target","prevState","height","weight","centimeterToMeter","bmi","console","log","Math","round","inches","heightToInches","parseInt","onClick","preventDefault","BMI","bmiValue","setBmiValue","bmiCategory","bmiClass","split","toLowerCase","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0a4e7c2e.chunk.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\n\nconst FormInput = props => {\n    const {\n        name,\n        type,\n        title,\n        value,\n        onChange,\n    } = props\n\n\n    return (\n        <div className=\"input-groups\">\n            <span className=\"label\">{title}</span>\n            <div className=\"range-container\">\n                <input \n                    type={type}\n                    name={name}\n                    className=\"range-input\"\n                    value={value}\n                    onChange={onChange}\n                    autoComplete=\"false\"\n\n                />\n            </div>\n        </div>\n    )\n}\n\nFormInput.propTypes = {\n    title: PropTypes.string,\n    value: PropTypes.string.isRequired,\n    onChange: PropTypes.func.isRequired,\n    type: PropTypes.oneOf(['text'])\n}\n\nexport default FormInput\n","import React, { useState, useEffect } from 'react'\nimport FormInput from './FormInput'\n// import PropTypes from 'prop-types';\n\nconst BMICalculator = (props) => {\n    const { getBmiValue} = props\n    \n    const [heightUnit, setHeightUnit] = useState('cm');\n    const [weightUnit, setWeightUnit] = useState('kg');\n    const [unit, setUnit] = useState('Metric');\n    const [count, setCount] = useState({\n        heightCount: '0',\n        inchesCount: '0',\n        weightCount: '0',\n    });\n    // destructured Keys from count object\n    const { heightCount, inchesCount, weightCount} = count;\n\n    useEffect(() => {\n        metricBMI(heightCount, weightCount);\n        imperialBMI(heightCount, weightCount, inchesCount)\n        // eslint-disable-next-line\n    }, [heightCount, weightCount, inchesCount])\n\n    const onChangeInput = e => {\n        const {name, value} = e.target;\n        setCount(prevState => ({...prevState, [name]: value}))\n    }\n\n    const onSelectTag = e => {\n        setUnit(e.target.value);\n        if (e.target.value === \"Metric\") {\n            setHeightUnit(\"cm\");\n            setWeightUnit(\"kg\");\n        } else {\n            setHeightUnit(\"ft\");\n            setWeightUnit(\"lbs\")\n        }\n    }\n\n    const resetFields = e => {\n        e.preventDefault();\n        getBmiValue(0)\n        setUnit('Metric');\n        setCount({\n            heightCount: '0',\n            inchesCount: '0',\n            weightCount: '0',\n        })\n        setHeightUnit(\"cm\");\n        setWeightUnit(\"kg\");\n    }\n\n    const metricBMI = (height, weight,) => {\n        if (height > 0 && weight > 0) {\n            const centimeterToMeter = height / 100\n            const bmi = weight / (centimeterToMeter * centimeterToMeter);\n            console.log(bmi)\n            getBmiValue(Math.round(bmi))\n        }\n    }\n\n    const imperialBMI = (height, weight, inches) => {\n        if (height > 0 && weight > 0 && inches > 0) {\n            const heightToInches = (height * 12) + parseInt(inches);\n            const bmi = 703 * (weight / (heightToInches * heightToInches))\n            getBmiValue(Math.round(bmi))\n            \n        }\n    }\n\n    return (\n        <>\n        <div className='bmi-inputs'>\n            <div className='input-fields'>\n                <div>\n                    <span className='label-unit'>Unit</span>\n                    <div className='unit'>\n                        <select\n                            name='unit'\n                            value={unit}\n                            onChange={onSelectTag}\n                            className='form-control form-control-sm'\n                        >\n                            <option value='Metric'>Metric</option>\n                            <option value='Imperial'>Imperial</option>\n                        </select>\n                    </div>\n                </div>\n                <FormInput\n                    type=\"text\"\n                    name=\"heightCount\"\n                    title={`Height (${heightUnit})`}\n                    value={heightCount}\n                    onChange={onChangeInput}\n                 />\n                {\n                    unit === 'Imperial' ? \n                    <FormInput\n                       type=\"text\"\n                       name=\"inchesCount\"\n                       title={` (in)`}\n                       value={inchesCount}\n                       onChange={onChangeInput}\n                    />\n                    : ''\n                }\n\n                 <FormInput\n                    type=\"text\"\n                    name=\"weightCount\"\n                    title={`Weight (${weightUnit})`}\n                    value={weightCount}\n                    onChange={onChangeInput}\n                 />\n                 \n            </div>\n            <button className='button' type='submit' onClick={resetFields}>\n                Reset\n            </button>\n        </div>\n        </>\n    )\n}\n\n\n// BMICalculator.propTypes = {\n//     fetchBmiValue: PropTypes.func.isRequired\n// }\n\nexport default BMICalculator\n","import React, { useState } from 'react'\nimport BMICalculator from './BMICalculator'\n\nconst BMI = () => {\n    const [bmiValue, setBmiValue] = useState(0);\n\n    const getBmiClass = bmi => {\n        if (bmi >= 1 && bmi <= 18.5) return 'Underweight';\n        if (bmi >= 18.5 && bmi <= 24.9) return 'Normal Weight';\n        if (bmi >= 24.9 && bmi <= 29.9) return 'Overweight';\n        if (bmi >= 30) return 'Obese';\n    }\n\n    const bmiCategory = getBmiClass(bmiValue);\n    console.log(bmiCategory)\n    let bmiClass = '';\n    if (bmiValue > 0 && bmiCategory) {\n        bmiClass = bmiCategory.split(' ')[0].toLowerCase();\n    }\n    return (\n        <>\n            <div className=\"calculator\">\n                <h3>Body Mass Index Calculator</h3>\n                <div className='bmi-result'>\n                    <div className='bmi-result-number'>\n                        Body Mass index (BMI) = {bmiValue}\n                    </div>\n                    <div className={`bmi-category ${bmiClass}`}>\n                        {bmiCategory}\n                    </div>\n\n                </div>\n                <BMICalculator getBmiValue={setBmiValue} />\n            </div>\n        </>\n    )\n}\n\nexport default BMI;\n","import React from 'react'; \nimport './App.css';\nimport BMI from './components/BMI';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className='row justify-content-center'>\n        <div className='col-lg-6 col-lg-offset-3'>\n        <BMI />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}